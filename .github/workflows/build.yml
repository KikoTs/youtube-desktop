name: Build & Auto-Release YouTube

on:
  push:
    branches: [ master ]
  pull_request:

env:
  NODE_VERSION: "20.x"

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]

    steps:
      - uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Setup Node.js (Linux/Windows)
        if: startsWith(matrix.os, 'macos') != true
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup Node.js (macOS)
        if: startsWith(matrix.os, 'macos')
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      # If it‚Äôs a pull request from a fork or any PR, just build (no release).
      - name: Vite Build (PR or fork only)
        if: github.repository == 'KikoTs/youtube-desktop' && github.event_name == 'pull_request'
        run: pnpm build

      # Only do the ‚Äúrelease:‚Ä¶‚Äù step (which packages the binary) if this is the main repo and NOT a PR.
      - name: Build & Package (macOS)
        if: |
          startsWith(matrix.os, 'macos') &&
          github.repository == 'KikoTs/youtube-desktop' &&
          github.event_name != 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pnpm release:mac

      - name: Build & Package (Linux)
        if: |
          startsWith(matrix.os, 'ubuntu') &&
          github.repository == 'KikoTs/youtube-desktop' &&
          github.event_name != 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sudo snap install snapcraft --classic
          sudo apt update
          sudo apt install -y flatpak flatpak-builder
          sudo flatpak remote-add --if-not-exists --system flathub https://flathub.org/repo/flathub.flatpakrepo
          sudo flatpak install -y flathub org.freedesktop.Platform/x86_64/24.08
          sudo flatpak install -y flathub org.freedesktop.Sdk/x86_64/24.08
          sudo flatpak install -y flathub org.electronjs.Electron2.BaseApp/x86_64/24.08
          pnpm release:linux

      - name: Build & Package (Windows)
        if: |
          startsWith(matrix.os, 'windows') &&
          github.repository == 'KikoTs/youtube-desktop' &&
          github.event_name != 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pnpm release:win

  release:
    name: Auto-Publish Release
    runs-on: ubuntu-latest
    needs: build
    if: |
      github.repository == 'KikoTs/youtube-desktop' &&
      github.ref == 'refs/heads/master' &&
      github.event_name != 'pull_request'
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      # 1) Compute VERSION_TAG (e.g. ‚Äúv1.2.3‚Äù) from package.json
      - name: Get version from package.json
        id: get_version
        run: |
          # 1) ask Node for the raw version string (e.g. ‚Äú1.2.3‚Äù)
          version=$(node -p "require('./package.json').version")
      
          # 2) export VERSION_TAG=v<that version>
          echo "VERSION_TAG=v${version}" >> $GITHUB_ENV
      
          # 3) compute a changelog anchor (strip dots, e.g. 1.2.3 ‚Üí 123)
          short_ver=$(echo "${version}" | sed 's/\.//g')
          echo "CHANGELOG_ANCHOR=${short_ver}" >> $GITHUB_ENV
      
          # (optional) print them back for debugging
          echo "VERSION_TAG is now: $VERSION_TAG"
          echo "CHANGELOG_ANCHOR is now: $CHANGELOG_ANCHOR"
      

      # 2) Check if that exact tag already exists
      - name: Check for existing tag
        id: check_tag
        run: |
          if git rev-parse -q --verify "refs/tags/${{ env.VERSION_TAG }}" >/dev/null; then
            echo "EXISTS=true" >> $GITHUB_ENV
          else
            echo "EXISTS=false" >> $GITHUB_ENV
          fi

      # 3) If it does NOT exist, update changelog on master and commit it
      - name: Update changelog (only if new version)
        if: env.EXISTS == 'false'
        run: |
          pnpm changelog
      - name: Commit updated changelog (only if new version)
        if: env.EXISTS == 'false'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update changelog for ${{ env.VERSION_TAG }}"
          file_pattern: "changelog.md"
          commit_user_name: CI
          commit_user_email: th-ch@users.noreply.github.com

      # 4) Tag this commit and push the tag (only if new version)
      - name: Create & push git tag (only if new version)
        if: env.EXISTS == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "${{ env.VERSION_TAG }}"
          git push origin "${{ env.VERSION_TAG }}"

      # 5) Create GitHub Release (only if new version)
      - name: Create GitHub Release (only if new version)
        if: env.EXISTS == 'false'
        uses: actions/create-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ env.VERSION_TAG }}
          release_name: ${{ env.VERSION_TAG }}
          draft: false
          prerelease: false
          body: |
            See [changelog](https://github.com/KikoTs/youtube-desktop/blob/master/changelog.md#${{ env.CHANGELOG_ANCHOR }}) for the list of updates and full diff.

            Thanks to all contributors! üèÖ

            (Note for Windows: `YouTube-Web-Setup-${{ env.VERSION_TAG }}.exe` is an installer, and `YouTube-${{ env.VERSION_TAG }}.exe` is a portable version)

